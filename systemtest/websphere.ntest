# -*-Perl-*-

###############################
# websphere.ntest
#
# Exercise basic components of EC-WebSphere plugin
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved
###############################

use strict;
use warnings;
use ECTest;

initCommander();

$::gPlugin_name   = $::ENV{PLUGIN_NAME};
$::gPlugin_key    = $::gPlugin_name;
$::gPlugin_key    =~ s/-[^-]+$//;
$::gPlugin_driver = $::gPlugin_key;
$::gPlugin_driver =~ s/-/::/g;

   use constant {
       SUCCESS => 0,
       ERROR   => 1,
       WINDOWS_OS_ID => 'MSWin32'
   };

# win/lin matches the chronic3 procedure platform property
$::gPlatform       = 'lin';
if ($^O eq WINDOWS_OS_ID) {
    $::gPlatform = 'win';
}

# from initCommander
$::N = $adminSession;
my $xpath = $::N->getPlugin($::gPlugin_key);
$::gPlugin_name = $xpath->findvalue('//pluginName')->value;
$::gPlugin_ver = $xpath->findvalue('//pluginVersion')->value;
$::gCreatePrivateDirs = 1;



# triggers fake data
$::gRunTestUseFakeOutput = 1;

$::gProjectImported = 0;
$::gtestProjectName = 'WebSphereTestProject';

my $outcome = '';

########################################################################
# importProject - imports the test project and asserts that the specified
#                 procedures exists
#
# Arguments:
#   -none
#
# Returns:
#   -nothing
#
########################################################################
sub importProject() {
 
    #assert project exists and is imported
    assertOK($::N->import(
             { file =>"$::gTestFileDir/websphereSystemTests.xml",
               path  => "/projects/WebSphereTestProject",
               force => 1
             } ), 'import unsuccessful');
    
    #assert all given procedures exist   
    assertOK($::N->getProcedure($::gtestProjectName, 'checkStatusOnServer'),
    'checkStatusOnServer procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'startServer'),
    'startServer procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'startServer1'),
    'startServer1 procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'startServer2'),
    'startServer2 procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'startServer3'),
    'startServer3 procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'startServer4'),
    'startServer4 procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'stopServer'),
    'stopServer procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'runScriptWsAdmin'),
    'runScriptWsAdmin procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'runScriptWsAdminFromNewFile'),
    'runScriptWsAdmin procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'stopApp'),
    'stopApp procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'startApp'),
    'startApp procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'deployApp'),
    'deployApp procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'undeployApp'),
    'undeployApp procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'createDatasource'),
    'createDatasource procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'deleteDatasource'),
    'deleteDatasource procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'createJDBCProvider'),
    'createJDBCProvider procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'deleteJDBCProvider'),
    'deleteJDBCProvider procedure doesn\'t exist');
    
    $::gProjectImported = 1;
}

########################################################################
# doSetup - invokes the project import method in case it hasn't been 
#           executed
#
# Arguments:
#   -none
#
# Returns:
#   -nothing
#
########################################################################
sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }
    
}

################################
# check-components-present - Check that the plugin contains required components
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "check-components-present", {}, sub {
    
    my $xpath = $::N->getSteps("$::gPlugin_name","CreateConfiguration");
    assertOK($xpath,"CreateConfiguration");
    assertEq("CreateConfiguration", $xpath->findvalue("//step[1]/stepName"), "step 1 is CreateConfiguration");
    assertEq("CreateAndAttachCredential", $xpath->findvalue("//step[2]/stepName"), "step 2 is CreateAndAttachCredential");

};

################################
# setup-create configuration - Test creating a configuration
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "setup-create configuration", {}, sub {
    my $xpath = $::N->runProcedure("$::gPlugin_name", 
        { procedureName => "CreateConfiguration",
          pollInterval  => '0.2',
          timeout       => 600,
          actualParameter => [ 
            { actualParameterName => 'config', value => "test3" }, 
            { actualParameterName => 'websphere_url', value => "localhost" },
            { actualParameterName => 'websphere_port', value => "9080" }, 
            { actualParameterName => 'credential', value => "test3" }, 
          ],
          credential => [ 
            { credentialName => 'test3', userName => "admin", password => "admin", },
          ],
        });

    assertOK($xpath, 'run create configuration procedure');
    # make sure it finished
    my $jobId = 0;
    my $status = '';
    assertDef($xpath, 'runProcedure finished without a timeout');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # examine log files
    $xpath = $::N->getJobDetails($jobId);

    writeFile("$::gCurrentTestDir/createConfiguration.log","====Job Details====\n$xpath->{_xml}\n");

    # check that the config and credential exist
    $xpath = $::N->getProperty("/projects/$::gPlugin_name/websphere_cfgs/test3/websphere_url");
    assertEq('localhost', $xpath->findvalue("//value")->string_value,"server url");
    
    $xpath = $::N->getProperty("/projects/$::gPlugin_name/websphere_cfgs/test3/websphere_port");
    assertEq('9080', $xpath->findvalue("//value")->string_value,"server port");
    
    $xpath = $::N->getCredential("$::gPlugin_name",'test3');
    assertEq('admin', $xpath->findvalue("//userName")->string_value, 'Credential user');
};


ntest "checkStatusOnServer", {}, sub {

      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "checkStatusOnServer",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
       
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
          
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='checkServerStatusLine']/value");

      #assertEq($websphereCommandLine, '', 'websphere command line doesn\'t match expected output');


};

ntest "startServer", {}, sub {
 
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "startServer",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='startServerLine']/value");

      assertEq('"C:\Program Files\IBM\WebSphere\AppServer\bin\startServer.bat" server1 -timeout 360', $websphereCommandLine, 
           'websphere command line doesn\'t match expected output');


    
};

ntest "startServer2", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "startServer2",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
     
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='startServerLine']/value");

      assertEq('"C:/Program Files/IBM/WebSphere/AppServer/bin/startServer.bat" server1 -timeout 360', $websphereCommandLine,  
           'websphere command line doesn\'t match expected output');
      

    
};

ntest "startServer3", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "startServer3",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='startServerLine']/value");

      assertEq('"C:/Program Files/IBM/WebSphere/AppServer/bin/startServer.bat" server1 -timeout 360', $websphereCommandLine, 
           'websphere command line doesn\'t match expected output');
      
};

ntest "startServer4", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "startServer4",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='startServerLine']/value");

      assertEq('"C:/Program Files/IBM/WebSphere/AppServer/bin/startServer.bat" server1 -timeout 360', $websphereCommandLine, 
           'websphere command line doesn\'t match expected output');
      
          
};

ntest "stopServer", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "stopServer",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='stopServerLine']/value");

      assertEq('"C:/Program Files/IBM/WebSphere/AppServer/bin/stopServer.bat" server1 -username admin -password **** -port 9080 -timeout 400', $websphereCommandLine,
           'websphere command line doesn\'t match expected output');
           
      
};

ntest "runScriptWsAdmin", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "runScriptWsAdmin",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
       
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='runCustomJob']/value");

      assertEq('"wsadmin.bat" -appendtrace true -f "E:\websphere\test_install\install_simple.jython" -lang jython -conntype soap -host localhost -port 9080 -user admin -password ****', $websphereCommandLine, 
           'websphere command line doesn\'t match expected output');

};

ntest "runScriptWsAdminFromNewFile", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "runScriptWsAdminFromNewFile",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
       
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='runCustomJob']/value");

      assertEq('"wsadmin.bat" -appendtrace true -f "generated_script.jython" -lang jython -conntype soap -host localhost -port 9080 -user admin -password ****', $websphereCommandLine, 
           'websphere command line doesn\'t match expected output');

};

ntest "startApp", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "startApp",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
       
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='startAppLine']/value");

      assertEq('"C:\Program Files\IBM\WebSphere\AppServer\bin\wsadmin.bat" -f "startapp_script.jython" -lang jython -conntype NONE -host localhost -port 9080 -user admin -password ****', $websphereCommandLine, 
           'websphere command line doesn\'t match expected output');

};

ntest "stopApp", {}, sub {
      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "stopApp",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
       
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='stopAppLine']/value");

      assertEq('"C:\Program Files\IBM\WebSphere\AppServer\bin\wsadmin.bat" -f "stopapp_script.jython" -lang jython -host localhost -port 9080 -user admin -password ****', $websphereCommandLine, 
           'websphere command line doesn\'t match expected output');

};

ntest "deployApp", {}, sub {
 
      doSetup();
      
      # run test job
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "deployApp",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
       
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='deployAppLine']/value");

      assertEq('"C:\Program Files\IBM\WebSphere\AppServer\bin\wsadmin.bat" -f deployapp_script.jython -lang jython -host localhost -port 9080 -user admin -password ****', $websphereCommandLine, 
           'websphere command line doesn\'t match expected output');

};

ntest "undeployApp", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "undeployApp",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
       
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='undeployAppLine']/value");

      assertEq('"C:\Program Files\IBM\WebSphere\AppServer\bin\wsadmin.bat" -f "undeployapp_script.jython" -lang jython -host localhost -port 9080 -user admin -password ****', $websphereCommandLine, 
           'websphere command line doesn\'t match expected output');

};

ntest "createDatasource", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "createDatasource",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
       
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='createDatasourceLine']/value");

      assertEq('"C:\Program Files\IBM\WebSphere\AppServer\bin\wsadmin.bat" -f createDS_script.jython -lang jython -conntype none -host localhost -port 9080', 
           $websphereCommandLine, 'websphere command line doesn\'t match expected output');

};


ntest "deleteDatasource", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "deleteDatasource",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
       
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='deleteDatasourceLine']/value");

      assertEq('"C:\Program Files\IBM\WebSphere\AppServer\bin\wsadmin.bat" -f deleteDS_script.jython -lang jython -conntype none -host localhost -port 9080', 
           $websphereCommandLine, 'websphere command line doesn\'t match expected output');

};


ntest "createJDBCProvider", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "createJDBCProvider",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
       
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='createJDBCLine']/value");

      assertEq('"C:\Program Files\IBM\WebSphere\AppServer\bin\wsadmin.bat" -f createJDBC_script.jython -lang jython -conntype none -host localhost -port 9080', 
           $websphereCommandLine, 'websphere command line doesn\'t match expected output');

};


ntest "deleteJDBCProvider", {}, sub {
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "deleteJDBCProvider",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
       
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $websphereCommandLine = $xpath->findvalue("//property[propertyName='deleteJDBCLine']/value");

      assertEq('"C:\Program Files\IBM\WebSphere\AppServer\bin\wsadmin.bat" -f deleteJDBC_script.jython -lang jython -conntype none -host localhost -port 9080', 
           $websphereCommandLine, 'websphere command line doesn\'t match expected output');

};
